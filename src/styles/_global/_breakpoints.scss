@use "sass:math";

$breakpoints: (
    xxsm: 24rem, // ~384px
    xsm: 30rem, // ~480px
    sm: 48rem, // ~768px
    md: 64rem, // ~1024px
    lg: 75rem, // ~1200px
    xl: 80rem, // ~1280px
    xxl: 90rem // ~1440px
);

@function is-number($value) {
    @return type-of($value)=='number';
}

@function is-absolute-length($value) {
    @return is-number($value) and index('cm''mm''in''px''pt''pc', unit($value)) !=null;
}

@mixin breakpoint($breakpoint, $dir : min) {
    // la variabile min/max serve per gestire l'apertura del menu mobile
    @if is-absolute-length($breakpoint) {
        @media only screen and (#{$dir}-width: $breakpoint) {
            @content;
        }
    }

    @else {
        @media only screen and (#{$dir}-width: map-get($map: $breakpoints, $key: $breakpoint)) {
            @content;
        }
    }
}

@each $breakpoint in $breakpoints {
    $slug: nth($breakpoint, 1);
    $break: nth($breakpoint, 2);

    @include breakpoint($break) {
        .hide-#{$slug} {
            display: none;
        }
    }

    @include breakpoint($break) {
        .show-#{$slug} {
            display: block;
        }
    }
}


$spacing: (
  0: 0,
  4XS: 2px,
  3XS: 4px,
  2XS: 8px,
  XS: 12px,
  S: 16px,
  M: 20px,
  L: 24px,
  XL: 32px,
  2XL: 48px
);

@function spacing($val) {
  $space-value: map-get($spacing, $val);
  
  @if $space-value != null {
    @return $space-value;
  } @else {
    @error "Value '#{$val}' not found in the spacing map.";
  }
}